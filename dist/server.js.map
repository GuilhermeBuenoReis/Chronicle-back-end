{"version":3,"sources":["../src/http/server.ts","../src/routes/craete-goals-route.ts","../src/db/index.ts","../src/db/schema.ts","../src/env.ts","../src/functions/create-goal.ts","../src/http/hooks/authenticate-user.ts","../src/routes/create-goals-completions-route.ts","../src/functions/create-goal-completion.ts","../src/functions/get-week-pending-goals.ts","../src/routes/get-pending-goals-router.ts","../src/functions/get-week-summary.ts","../src/routes/get-week-summary-route.ts","../src/routes/authenticate-from-github-route.ts","../src/functions/authenticate-from-github-code.ts","../src/modules/github-oauth.ts","../src/modules/auth.ts","../src/routes/get-profile-route.ts","../src/functions/get-user.ts","../src/routes/get-user-level-and-experience-route.ts","../src/functions/get-user-level-and-experience.ts","../src/modules/gamification.ts","../src/routes/create-folder-route.ts","../src/functions/create-folder.ts","../src/routes/create-user-route.ts","../src/functions/create-user.ts","../src/routes/find-user-by-email-and-password-route.ts","../src/functions/find-user-by-email-and-password.ts","../src/routes/authenticate-user-route.ts","../src/functions/authenticate-user.ts","../src/routes/create-note-router.ts","../src/functions/create-note.ts","../src/routes/get-notes-route.ts","../src/functions/get-notes.ts","../src/routes/find-notes-by-tag-route.ts","../src/functions/find-note-by-tag.ts","../src/routes/find-note-by-id-route.ts","../src/functions/find-note-by-id.ts","../src/routes/update-note-route.ts","../src/functions/update-note-by-id.ts","../src/routes/delete-note-by-id-route.ts","../src/functions/delete-note-by-id.ts","../src/routes/create-taks-route.ts","../src/functions/create-task.ts","../src/routes/get-task-route.ts","../src/functions/get-tasks.ts","../src/routes/update-task-by-id-route.ts","../src/functions/update-task-by-id.ts","../src/routes/delete-task-by-id-route.ts","../src/functions/delete-task-by-id.ts"],"sourcesContent":["import fastify from 'fastify';\nimport {\n  jsonSchemaTransform,\n  serializerCompiler,\n  validatorCompiler,\n  type ZodTypeProvider,\n} from 'fastify-type-provider-zod';\n\nimport { createGoalsRoute } from '../routes/craete-goals-route';\nimport { createGoalCompletionRoute } from '../routes/create-goals-completions-route';\nimport { getWeekPendingGoalsRoute } from '../routes/get-pending-goals-router';\nimport { getWeekSummaryRoute } from '../routes/get-week-summary-route';\nimport { fastifyCors } from '@fastify/cors';\nimport { fastifySwagger } from '@fastify/swagger';\nimport { fastifySwaggerUi } from '@fastify/swagger-ui';\nimport { authenticateFromGithubRoute } from '../routes/authenticate-from-github-route';\nimport fastifyJwt from '@fastify/jwt';\nimport { env } from '../env';\nimport { getProfileRoute } from '../routes/get-profile-route';\nimport { getUserLevelAndExperienceRoute } from '../routes/get-user-level-and-experience-route';\nimport { resolve } from 'node:path';\nimport { writeFile } from 'node:fs/promises';\nimport { CreateFoldersRoute } from '../routes/create-folder-route';\nimport { CreateUserRoute } from '../routes/create-user-route';\nimport { getUserByEmailAndPasswordRoute } from '../routes/find-user-by-email-and-password-route';\nimport { AuthenticateUserRoute } from '../routes/authenticate-user-route';\nimport { CreateNoteRoute } from '../routes/create-note-router';\nimport { getNotesRoute } from '../routes/get-notes-route';\nimport { findNotesByTagsRoute } from '../routes/find-notes-by-tag-route';\nimport { findNotesByIdRoute } from '../routes/find-note-by-id-route';\nimport { updatedNoteRoute } from '../routes/update-note-route';\nimport { deleteNoteByIdRoute } from '../routes/delete-note-by-id-route';\nimport { createTaskRoute } from '../routes/create-taks-route';\nimport { getTaskRoute } from '../routes/get-task-route';\nimport { updateTaskById } from '../functions/update-task-by-id';\nimport { updatedTaskRoute } from '../routes/update-task-by-id-route';\nimport { deleteTaskByIdRoute } from '../routes/delete-task-by-id-route';\n\nconst app = fastify().withTypeProvider<ZodTypeProvider>();\n\napp.register(fastifyCors, {\n  origin: '*',\n});\n\napp.setValidatorCompiler(validatorCompiler);\napp.setSerializerCompiler(serializerCompiler);\n\napp.register(fastifyJwt, {\n  secret: env.JWT_SECRET,\n});\n\napp.register(fastifySwagger, {\n  openapi: {\n    info: {\n      title: 'in-orbit',\n      version: '1.0.0',\n    },\n  },\n  transform: jsonSchemaTransform,\n});\n\napp.register(fastifySwaggerUi, {\n  routePrefix: '/docs',\n});\n\napp.register(createGoalsRoute);\napp.register(createGoalCompletionRoute);\napp.register(getWeekPendingGoalsRoute);\napp.register(getWeekSummaryRoute);\napp.register(authenticateFromGithubRoute);\napp.register(getProfileRoute);\napp.register(getUserLevelAndExperienceRoute);\napp.register(CreateFoldersRoute);\napp.register(CreateUserRoute);\napp.register(getUserByEmailAndPasswordRoute);\napp.register(AuthenticateUserRoute);\napp.register(CreateNoteRoute);\napp.register(getNotesRoute);\napp.register(findNotesByTagsRoute);\napp.register(findNotesByIdRoute);\napp.register(updatedNoteRoute);\napp.register(deleteNoteByIdRoute);\napp.register(createTaskRoute);\napp.register(getTaskRoute);\napp.register(updatedTaskRoute);\napp.register(deleteTaskByIdRoute);\n\napp\n  .listen({\n    port: 3333,\n    host: '0.0.0.0',\n  })\n  .then(() => {\n    console.log('Http server running ðŸš€ðŸš€');\n  });\n\nif (env.NODE_ENV === 'development') {\n  const specFile = resolve(__dirname, '../../swagger.json');\n\n  app.ready().then(() => {\n    const spec = JSON.stringify(app.swagger(), null, 2);\n\n    writeFile(specFile, spec).then(() => {\n      console.log('Swagger spec generated!');\n    });\n  });\n}\n","import { z } from 'zod';\nimport type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { createGoal } from '../functions/create-goal';\nimport { authenticateUserHook } from '../http/hooks/authenticate-user';\n\nexport const createGoalsRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/goals',\n    {\n      onRequest: [authenticateUserHook],\n      schema: {\n        operationId: 'createGoals',\n        tags: ['goals'],\n        description: 'Create a goal',\n        body: z.object({\n          title: z.string(),\n          desiredWeeklyFrequency: z.number().int().min(1).max(7),\n        }),\n        response: {\n          201: z.null(),\n        },\n      },\n    },\n    async (request, reply) => {\n      const userId = request.user.sub;\n      const { title, desiredWeeklyFrequency } = request.body;\n\n      await createGoal({\n        userId,\n        title,\n        desiredWeeklyFrequency,\n      });\n\n      return reply.status(201).send();\n    }\n  );\n};\n","import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from './schema';\nimport { env } from '../env';\n\nexport const client = postgres(env.DATABASE_URL);\nexport const db = drizzle(client, {\n  schema,\n  logger: env.NODE_ENV === 'development',\n});\n","import {\n  pgTable,\n  text,\n  integer,\n  timestamp,\n  json,\n  boolean,\n  bigint,\n} from 'drizzle-orm/pg-core';\nimport { createId } from '@paralleldrive/cuid2';\n\nexport const users = pgTable('users', {\n  id: text('id')\n    .primaryKey()\n    .$defaultFn(() => createId()),\n  name: text('name'),\n  email: text('email'),\n  password: text('password'),\n  avatarUrl: text('avatar_url').notNull(),\n  experience: integer().notNull().default(0),\n  externalAcountId: integer('exeternal_acount_id').unique(),\n});\n\nexport const goals = pgTable('goals', {\n  id: text('id')\n    .primaryKey()\n    .$defaultFn(() => createId()),\n  title: text('title').notNull(),\n  userId: text('user_id')\n    .references(() => users.id)\n    .notNull(),\n  desiredWeeklyFrequency: integer('desired_weekly_frequency').notNull(),\n  createAt: timestamp('created_at', { withTimezone: true })\n    .notNull()\n    .defaultNow(),\n});\n\nexport const goalCompletions = pgTable('goal_completions', {\n  id: text('id')\n    .primaryKey()\n    .$defaultFn(() => createId()),\n  goalId: text('goal_id')\n    .references(() => goals.id)\n    .notNull(),\n\n  createAt: timestamp('created_at', { withTimezone: true })\n    .notNull()\n    .defaultNow(),\n});\n\nexport const folders = pgTable('folder', {\n  id: text('id')\n    .primaryKey()\n    .$defaultFn(() => createId()),\n  name: text('name').notNull(),\n  createAt: timestamp('created_at', { withTimezone: true })\n    .notNull()\n    .defaultNow(),\n  updatedAt: timestamp('updated_at', { withTimezone: true })\n    .notNull()\n    .defaultNow(),\n  userId: text('user_id')\n    .references(() => users.id)\n    .notNull(),\n});\n\nexport const notes = pgTable('notes', {\n  id: text('id')\n    .primaryKey()\n    .$defaultFn(() => createId()),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  folder_id: text('folder_id').references(() => folders.id),\n  tags: text('tags'),\n  userId: text('user_id')\n    .references(() => users.id)\n    .notNull(),\n\n  createdAt: timestamp('created_at', { withTimezone: true })\n    .notNull()\n    .defaultNow(),\n  updatedAt: timestamp('updated_at', { withTimezone: true })\n    .notNull()\n    .defaultNow(),\n});\n\nexport const tasks = pgTable('tasks', {\n  id: text('id')\n    .primaryKey()\n    .$defaultFn(() => createId()),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  is_completed: boolean().default(false),\n  userId: text('user_id')\n    .references(() => users.id)\n    .notNull(),\n  createAt: timestamp('created_at', { withTimezone: true })\n    .notNull()\n    .defaultNow(),\n  updatedAt: timestamp('updated_at', { withTimezone: true })\n    .notNull()\n    .defaultNow(),\n});\n","import z from 'zod';\n\nconst envSchema = z.object({\n  NODE_ENV: z\n    .enum(['development', 'test', 'production'])\n    .optional()\n    .default('production'),\n\n  DATABASE_URL: z.string().url(),\n\n  GITHUB_CLIENT_ID: z.string(),\n  GITHUB_CLIENT_SECRET: z.string(),\n  JWT_SECRET: z.string(),\n});\n\nexport const env = envSchema.parse(process.env);\n","import { db } from '../db';\nimport { goals } from '../db/schema';\n\ninterface CreateGoalRequest {\n  userId: string;\n  title: string;\n  desiredWeeklyFrequency: number;\n}\nexport async function createGoal({\n  userId,\n  title,\n  desiredWeeklyFrequency,\n}: CreateGoalRequest) {\n  const result = await db\n    .insert(goals)\n    .values({\n      userId,\n      title,\n      desiredWeeklyFrequency,\n    })\n    .returning();\n\n  const goal = result[0];\n\n  return {\n    goal,\n  };\n}\n","import type { FastifyReply, FastifyRequest } from 'fastify';\n\nexport async function authenticateUserHook(\n  request: FastifyRequest,\n  reply: FastifyReply\n) {\n  try {\n    await request.jwtVerify();\n  } catch (error) {\n    return reply.status(401).send({ message: 'Unauthorized' });\n  }\n}\n","import { z } from 'zod';\nimport type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { createGoalCompletion } from '../functions/create-goal-completion';\nimport { authenticateUserHook } from '../http/hooks/authenticate-user';\n\nexport const createGoalCompletionRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/completions',\n    {\n      onRequest: [authenticateUserHook],\n      schema: {\n        operationId: 'createGoalCompletion',\n        tags: ['goals'],\n        description: 'Complete a goal',\n        body: z.object({\n          goalId: z.string(),\n        }),\n        response: {\n          201: z.null(),\n        },\n      },\n    },\n    async (request, reply) => {\n      const userId = request.user.sub;\n      const { goalId } = request.body;\n\n      await createGoalCompletion({\n        userId,\n        goalId,\n      });\n\n      return reply.status(201).send();\n    }\n  );\n};\n","import { count, and, gte, lte, eq, sql } from 'drizzle-orm';\nimport { db } from '../db';\nimport { goalCompletions, goals, users } from '../db/schema';\nimport dayjs from 'dayjs';\n\ninterface CreateGoalCompletionRequest {\n  userId: string;\n  goalId: string;\n}\nexport async function createGoalCompletion({\n  userId,\n  goalId,\n}: CreateGoalCompletionRequest) {\n  const firstDayOfWeek = dayjs().startOf('week').toDate();\n  const lastDayOfWeek = dayjs().endOf('week').toDate();\n\n  const goalCompletionsCount = db.$with('goal_completions-counts').as(\n    db\n      .select({\n        goalId: goalCompletions.goalId,\n        completionCount: count(goalCompletions.id).as('completionCount'),\n      })\n      .from(goalCompletions)\n      .innerJoin(goals, eq(goals.id, goalCompletions.goalId))\n      .where(\n        and(\n          gte(goalCompletions.createAt, firstDayOfWeek),\n          lte(goalCompletions.createAt, lastDayOfWeek),\n          eq(goals.userId, userId)\n        )\n      )\n      .groupBy(goalCompletions.goalId)\n  );\n\n  const result = await db\n    .with(goalCompletionsCount)\n    .select({\n      desiredWeeklyFrequency: goals.desiredWeeklyFrequency,\n      completionCount: sql /*sql*/`\n        COALESCE(${goalCompletionsCount.completionCount}, 0)\n      `.mapWith(Number),\n    })\n    .from(goals)\n    .leftJoin(goalCompletionsCount, eq(goalCompletionsCount.goalId, goals.id))\n    .where(and(eq(goals.id, goalId), eq(goals.userId, userId)))\n    .limit(1);\n\n  const { completionCount, desiredWeeklyFrequency } = result[0];\n\n  const isLastCompletionFromGoal =\n    completionCount + 1 === desiredWeeklyFrequency;\n\n  const earnedExperience = isLastCompletionFromGoal ? 7 : 5;\n\n  if (completionCount >= desiredWeeklyFrequency) {\n    throw new Error('Goal already completed this week!');\n  }\n\n  const goalCompletion = await db.transaction(async tx => {\n    const [goalCompletion] = await db\n      .insert(goalCompletions)\n      .values({ goalId })\n      .returning();\n\n    await db\n      .update(users)\n      .set({\n        experience: sql /* sql*/`\n      ${users.experience} + ${earnedExperience}\n      `,\n      })\n      .where(eq(users.id, userId));\n\n    return goalCompletion;\n  });\n\n  return {\n    goalCompletion,\n  };\n}\n","import dayjs from 'dayjs';\nimport { db } from '../db';\nimport { goalCompletions, goals } from '../db/schema';\nimport { and, count, eq, gte, lte, sql } from 'drizzle-orm';\n\ninterface GetWeekPendingGoalsRequest {\n  userId: string;\n}\n\nexport async function getWeekPendingGoals({\n  userId,\n}: GetWeekPendingGoalsRequest) {\n  const firstDayOfWeek = dayjs().startOf('week').toDate();\n  const lastDayOfWeek = dayjs().endOf('week').toDate();\n\n  const goalsCreatedUpToWeek = db.$with('goals_created_up_to_week').as(\n    db\n      .select({\n        id: goals.id,\n        title: goals.title,\n        desiredWeeklyFrequency: goals.desiredWeeklyFrequency,\n        createdAt: goals.createAt,\n      })\n      .from(goals)\n      .where(and(lte(goals.createAt, lastDayOfWeek), eq(goals.userId, userId)))\n  );\n\n  const goalCompletionsCount = db.$with('goal_completions-counts').as(\n    db\n      .select({\n        goalId: goalCompletions.goalId,\n        completionCount: count(goalCompletions.id).as('completionCount'),\n      })\n      .from(goalCompletions)\n      .innerJoin(goals, eq(goals.id, goalCompletions.goalId))\n      .where(\n        and(\n          gte(goalCompletions.createAt, firstDayOfWeek),\n          lte(goalCompletions.createAt, lastDayOfWeek),\n          eq(goals.userId, userId)\n        )\n      )\n      .groupBy(goalCompletions.goalId)\n  );\n\n  const pendingGoals = await db\n    .with(goalsCreatedUpToWeek, goalCompletionsCount)\n    .select({\n      id: goalsCreatedUpToWeek.id,\n      title: goalsCreatedUpToWeek.title,\n      desiredWeeklyFrequency: goalsCreatedUpToWeek.desiredWeeklyFrequency,\n      completionCount: sql /*sql*/`\n        COALESCE(${goalCompletionsCount.completionCount}, 0)\n      `.mapWith(Number),\n    })\n    .from(goalsCreatedUpToWeek)\n    .leftJoin(\n      goalCompletionsCount,\n      eq(goalCompletionsCount.goalId, goalsCreatedUpToWeek.id)\n    );\n\n  return {\n    pendingGoals,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { getWeekPendingGoals } from '../functions/get-week-pending-goals';\nimport z from 'zod';\nimport { authenticateUserHook } from '../http/hooks/authenticate-user';\n\nexport const getWeekPendingGoalsRoute: FastifyPluginAsyncZod = async app => {\n  app.get(\n    '/pending-goals',\n    {\n      onRequest: [authenticateUserHook],\n      schema: {\n        operationId: 'getWeekPendingGoals',\n        tags: ['goals'],\n        description: 'Get pending goals',\n        response: {\n          200: z.object({\n            pendingGoals: z.array(\n              z.object({\n                id: z.string(),\n                title: z.string(),\n                desiredWeeklyFrequency: z.number(),\n                completionCount: z.number(),\n              })\n            ),\n          }),\n        },\n      },\n    },\n    async request => {\n      const userId = request.user.sub;\n      const { pendingGoals } = await getWeekPendingGoals({\n        userId,\n      });\n\n      return { pendingGoals };\n    }\n  );\n};\n","import dayjs from 'dayjs';\nimport { db } from '../db';\nimport { goalCompletions, goals } from '../db/schema';\nimport { and, desc, eq, gte, lte, sql } from 'drizzle-orm';\n\ninterface GetWeekSummaryRequest {\n  userId: string;\n  weekStartsAt: Date;\n}\n\nexport async function getWeekSummary({\n  userId,\n  weekStartsAt,\n}: GetWeekSummaryRequest) {\n  const firstDayOfWeek = weekStartsAt;\n  const lastDayOfWeek = dayjs(weekStartsAt).endOf('week').toDate();\n\n  const goalsCreatedUpToWeek = db.$with('goals_created_up_to_week').as(\n    db\n      .select({\n        id: goals.id,\n        title: goals.title,\n        desiredWeeklyFrequency: goals.desiredWeeklyFrequency,\n        createdAt: goals.createAt,\n      })\n      .from(goals)\n      .where(and(lte(goals.createAt, lastDayOfWeek), eq(goals.userId, userId)))\n  );\n\n  const goalsCompletedInWeek = db.$with('goal_completed_in_week').as(\n    db\n      .select({\n        id: goalCompletions.id,\n        title: goals.title,\n        completedAt: goalCompletions.createAt,\n        completedAtDate: sql /*sql*/`\n          DATE(${goalCompletions.createAt})\n        `.as('completedAtDate'),\n      })\n      .from(goalCompletions)\n      .innerJoin(goals, eq(goals.id, goalCompletions.goalId))\n      .where(\n        and(\n          gte(goalCompletions.createAt, firstDayOfWeek),\n          lte(goalCompletions.createAt, lastDayOfWeek),\n          eq(goals.userId, userId)\n        )\n      )\n      .orderBy(desc(goalCompletions.createAt))\n  );\n\n  const goalsCompletedByWeekDay = db.$with('goals_completed_by_week_day').as(\n    db\n      .select({\n        completedAtDate: goalsCompletedInWeek.completedAtDate,\n        completions: sql /*sql*/`\n          JSON_AGG(\n            JSON_BUILD_OBJECT(\n              'id', ${goalsCompletedInWeek.id},\n              'title', ${goalsCompletedInWeek.title},\n              'completedAt', ${goalsCompletedInWeek.completedAt}\n            )\n          )\n        `.as('completions'),\n      })\n      .from(goalsCompletedInWeek)\n      .groupBy(goalsCompletedInWeek.completedAtDate)\n      .orderBy(desc(goalsCompletedInWeek.completedAtDate))\n  );\n\n  type GoalsPerDay = Record<\n    string,\n    {\n      id: string;\n      title: string;\n      completedAt: string;\n    }[]\n  >;\n\n  const result = await db\n    .with(goalsCreatedUpToWeek, goalsCompletedInWeek, goalsCompletedByWeekDay)\n    .select({\n      completed:\n        sql /*sql*/`(SELECT COUNT(*) FROM ${goalsCompletedInWeek})`.mapWith(\n          Number\n        ),\n      total:\n        sql /*sql*/`(SELECT SUM(${goalsCreatedUpToWeek.desiredWeeklyFrequency}) FROM ${goalsCreatedUpToWeek})`.mapWith(\n          Number\n        ),\n      goalsPerDay: sql /*sql */<GoalsPerDay>`\n        JSON_OBJECT_AGG(\n          ${goalsCompletedByWeekDay.completedAtDate},\n          ${goalsCompletedByWeekDay.completions}\n        )\n      `,\n    })\n    .from(goalsCompletedByWeekDay);\n\n  return {\n    summary: result[0],\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { getWeekSummary } from '../functions/get-week-summary';\nimport z from 'zod';\nimport { authenticateUserHook } from '../http/hooks/authenticate-user';\nimport dayjs from 'dayjs';\n\nexport const getWeekSummaryRoute: FastifyPluginAsyncZod = async app => {\n  app.get(\n    '/summary',\n    {\n      onRequest: [authenticateUserHook],\n      schema: {\n        operationId: 'getWeekSummary',\n        tags: ['goals'],\n        description: 'Get week summary goals',\n        querystring: z.object({\n          weekStartsAt: z.coerce\n            .date()\n            .optional()\n            .default(dayjs().startOf('week').toDate()),\n        }),\n        response: {\n          200: z.object({\n            summary: z.object({\n              completed: z.number(),\n              total: z.number(),\n              goalsPerDay: z.record(\n                z.string(),\n                z.array(\n                  z.object({\n                    id: z.string(),\n                    title: z.string(),\n                    completedAt: z.string(),\n                  })\n                )\n              ),\n            }),\n          }),\n        },\n      },\n    },\n    async request => {\n      const userId = request.user.sub;\n      const { weekStartsAt } = request.query;\n      const { summary } = await getWeekSummary({ userId, weekStartsAt });\n\n      return { summary };\n    }\n  );\n};\n","import { z } from 'zod';\nimport type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { authenticateFromGithubCode } from '../functions/authenticate-from-github-code';\n\nexport const authenticateFromGithubRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/auth/github',\n    {\n      schema: {\n        operationId: 'authenticateFromGithub',\n        tags: ['auth'],\n        description: 'Authenticate user from Gitub code',\n        body: z.object({\n          code: z.string(),\n        }),\n        response: {\n          201: z.object({ token: z.string() }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { code } = request.body;\n\n      const { token } = await authenticateFromGithubCode({ code });\n\n      return reply.status(201).send({ token });\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { users } from '../db/schema';\nimport {\n  getAccessTokenFromCode,\n  getUserFromAccessToken,\n} from '../modules/github-oauth';\nimport { authenticateUser } from '../modules/auth';\n\ninterface AuthenticateFromGIthubCodeRequest {\n  code: string;\n}\n\nexport async function authenticateFromGithubCode({\n  code,\n}: AuthenticateFromGIthubCodeRequest) {\n  const accessToken = await getAccessTokenFromCode(code);\n  const githubUser = await getUserFromAccessToken(accessToken);\n\n  const result = await db\n    .select()\n    .from(users)\n    .where(eq(users.externalAcountId, githubUser.id));\n\n  let userId: string | null;\n\n  const userAlreadyExist = result.length > 0;\n\n  if (userAlreadyExist) {\n    userId = result[0].id;\n  } else {\n    const [insertedUser] = await db\n      .insert(users)\n      .values({\n        name: githubUser.name,\n        email: githubUser.email,\n        avatarUrl: githubUser.avatar_url,\n        externalAcountId: githubUser.id,\n      })\n      .returning();\n    userId = insertedUser.id;\n  }\n\n  const token = await authenticateUser(userId);\n\n  return { token };\n}\n","import { env } from '../env';\n\ninterface AccessTokenResponse {\n  access_token: string;\n}\n\ninterface GetUserResponse {\n  id: number;\n  name: string | null;\n  email: string | null;\n  avatar_url: string;\n}\n\nexport async function getAccessTokenFromCode(code: string) {\n  const accessTokenURL = new URL('https://github.com/login/oauth/access_token');\n\n  accessTokenURL.searchParams.append('client_id', env.GITHUB_CLIENT_ID);\n  accessTokenURL.searchParams.append('client_secret', env.GITHUB_CLIENT_SECRET);\n  accessTokenURL.searchParams.append('code', code);\n\n  const response = await fetch(accessTokenURL, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n    },\n  });\n\n  const { access_token }: AccessTokenResponse = await response.json();\n\n  return access_token;\n}\n\nexport async function getUserFromAccessToken(accessToken: string) {\n  const response = await fetch('https://api.github.com/user', {\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n\n  const data: GetUserResponse = await response.json();\n\n  console.log(data);\n\n  return data;\n}\n","import { SignJWT } from 'jose';\nimport { env } from '../env';\n\nexport async function authenticateUser(userId: string): Promise<string> {\n  const secret = new TextEncoder().encode(env.JWT_SECRET);\n\n  const token = await new SignJWT()\n    .setProtectedHeader({ alg: 'HS256' })\n    .setSubject(userId)\n    .setExpirationTime('1d')\n    .setIssuedAt()\n    .sign(secret);\n\n  return token;\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { authenticateUserHook } from '../http/hooks/authenticate-user';\nimport { getUser } from '../functions/get-user';\n\nexport const getProfileRoute: FastifyPluginAsyncZod = async app => {\n  app.get(\n    '/profile',\n    {\n      onRequest: [authenticateUserHook],\n      schema: {\n        operationId: 'getProfile',\n        tags: ['user'],\n        description: 'Get user profile',\n        response: {\n          200: z.object({\n            profile: z.object({\n              id: z.string(),\n              name: z.string().nullable(),\n              email: z.string().nullable(),\n              avatarUrl: z.string().url(),\n            }),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const userId = request.user.sub;\n      const { user } = await getUser({\n        userId,\n      });\n\n      return reply.status(200).send({ profile: user });\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { users } from '../db/schema';\n\ninterface GetUserRequest {\n  userId: string;\n}\n\nexport async function getUser({ userId }: GetUserRequest) {\n  const result = await db\n    .select({\n      id: users.id,\n      name: users.name,\n      email: users.email,\n      avatarUrl: users.avatarUrl,\n    })\n    .from(users)\n    .where(eq(users.id, userId));\n\n  const user = result[0];\n\n  return {\n    user,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { authenticateUserHook } from '../http/hooks/authenticate-user';\nimport { getUserLevelAndExperience } from '../functions/get-user-level-and-experience';\n\nexport const getUserLevelAndExperienceRoute: FastifyPluginAsyncZod =\n  async app => {\n    app.get(\n      '/profile/gamification',\n      {\n        onRequest: [authenticateUserHook],\n        schema: {\n          operationId: 'getUserLevelAndExperience',\n          tags: ['user', 'gamification'],\n          description: 'Get user experience and level',\n          response: {\n            200: z.object({\n              experience: z.number(),\n              level: z.number(),\n              experienceToNextLevel: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        const userId = request.user.sub;\n        const { experience, experienceToNextLevel, level } =\n          await getUserLevelAndExperience({\n            userId,\n          });\n\n        return reply\n          .status(200)\n          .send({ experience, experienceToNextLevel, level });\n      }\n    );\n  };\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { users } from '../db/schema';\nimport {\n  calculateExperienceForNextLevel,\n  calculateLevelFromExperience,\n} from '../modules/gamification';\n\ninterface GetUserLevelAndExperienceRequest {\n  userId: string;\n}\n\nexport async function getUserLevelAndExperience({\n  userId,\n}: GetUserLevelAndExperienceRequest) {\n  const [{ experience }] = await db\n    .select({\n      experience: users.experience,\n    })\n    .from(users)\n    .where(eq(users.id, userId));\n\n  const level = calculateLevelFromExperience(experience);\n  const experienceToNextLevel = calculateExperienceForNextLevel(level);\n\n  return {\n    experience,\n    level,\n    experienceToNextLevel,\n  };\n}\n","const BASE_EXPERIENCE = 20;\nconst EXPERIENCE_FACTOR = 1.3;\n\nexport function calculateLevelFromExperience(experience: number) {\n  return (\n    Math.floor(\n      Math.log((experience / BASE_EXPERIENCE) * (EXPERIENCE_FACTOR - 1) + 1) /\n        Math.log(EXPERIENCE_FACTOR)\n    ) + 1\n  );\n}\n\nexport function calculateExperienceForNextLevel(level: number) {\n  return Math.floor(\n    BASE_EXPERIENCE *\n      ((EXPERIENCE_FACTOR ** level - 1) / (EXPERIENCE_FACTOR - 1))\n  );\n}\n","import { z } from 'zod';\nimport type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { authenticateUserHook } from '../http/hooks/authenticate-user';\nimport { CreateFolder } from '../functions/create-folder';\n\nexport const CreateFoldersRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/folder',\n    {\n      schema: {\n        operationId: 'CreateFolders',\n        tags: ['folder'],\n        description: 'Create a folder',\n        body: z.object({\n          userId: z.string(),\n          name: z.string(),\n        }),\n        response: {\n          201: z.null(),\n        },\n      },\n    },\n    async (request, reply) => {\n      // const userId = request.user.sub;\n      const { name, userId } = request.body;\n\n      await CreateFolder({\n        userId,\n        name,\n      });\n\n      return reply.status(201).send();\n    }\n  );\n};\n","import { db } from '../db';\nimport { folders } from '../db/schema';\n\ninterface CreateFolderRequest {\n  name: string;\n  userId: string;\n}\nexport async function CreateFolder({ name, userId }: CreateFolderRequest) {\n  const [result] = await db\n    .insert(folders)\n    .values({\n      name,\n      userId,\n    })\n    .returning();\n\n  const folder = result;\n\n  return {\n    folder: {\n      name: result.name,\n    },\n  };\n}\n","import { z } from 'zod';\nimport type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { CreateUser } from '../functions/create-user';\n\nexport const CreateUserRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/user',\n    {\n      schema: {\n        operationId: 'CreateUser',\n        tags: ['folder'],\n        description: 'Create a folder',\n        body: z.object({\n          email: z.string(),\n          name: z.string(),\n          password: z.string(),\n          avatarUrl: z.string(),\n        }),\n        response: {\n          201: z.null(),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { name, email, avatarUrl, password } = request.body;\n\n      await CreateUser({\n        name,\n        email,\n        password,\n        avatarUrl,\n      });\n\n      return reply.status(201).send();\n    }\n  );\n};\n","import { db } from '../db';\nimport { users } from '../db/schema';\n\ninterface CreateUserRequest {\n  name: string | null;\n  email: string | null;\n  password: string | null;\n  avatarUrl: string;\n}\nexport async function CreateUser({\n  name,\n  avatarUrl,\n  email,\n  password,\n}: CreateUserRequest) {\n  const result = await db\n    .insert(users)\n    .values({\n      name,\n      email,\n      password,\n      avatarUrl,\n    })\n    .returning();\n\n  const user = result[0];\n  console.log(user);\n\n  return {\n    user,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { getUserByEmailAndPassword } from '../functions/find-user-by-email-and-password';\n\nexport const getUserByEmailAndPasswordRoute: FastifyPluginAsyncZod =\n  async app => {\n    app.post(\n      '/auth/find',\n      {\n        schema: {\n          operationId: 'getUserByEmailAndPassword',\n          tags: ['user', 'auth'],\n          description: 'Get user by email and passowrd',\n          body: z.object({\n            email: z.string(),\n            password: z.string(),\n          }),\n          response: {\n            201: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        const { email, password } = request.body;\n        const { user } = await getUserByEmailAndPassword({ email, password });\n\n        return reply.status(201).send();\n      }\n    );\n  };\n","import { and, eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { users } from '../db/schema';\n\ninterface getUserByEmailAndPasswordRequest {\n  email: string;\n  password: string;\n}\n\nexport async function getUserByEmailAndPassword({\n  email,\n  password,\n}: getUserByEmailAndPasswordRequest) {\n  const result = await db\n    .select({\n      id: users.id,\n      email: users.email,\n      password: users.password,\n    })\n    .from(users)\n    .where(and(eq(users.email, email), eq(users.password, password)));\n\n  const user = result[0];\n\n  if (!user) {\n    throw new Error('User not found');\n  }\n\n  return {\n    user,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { getUserByEmailAndPassword } from '../functions/find-user-by-email-and-password';\nimport { authenticate } from '../functions/authenticate-user';\n\nexport const AuthenticateUserRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/auth/authenticate',\n    {\n      schema: {\n        operationId: 'AuthenticateUserRoute',\n        tags: ['user', 'auth'],\n        description: 'Authenticate user',\n        body: z.object({\n          email: z.string(),\n          password: z.string(),\n        }),\n        response: {\n          201: z.object({ token: z.string() }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { email, password } = request.body;\n      const { token } = await authenticate({ email, password });\n\n      return reply.status(201).send({ token });\n    }\n  );\n};\n","import { authenticateUser } from '../modules/auth';\nimport { getUserByEmailAndPassword } from './find-user-by-email-and-password';\n\ninterface AuthenticateRequest {\n  email: string;\n  password: string;\n}\n\nexport async function authenticate({\n  email,\n  password,\n}: AuthenticateRequest): Promise<{ token: string }> {\n  const result = await getUserByEmailAndPassword({ email, password });\n  const user = result.user.id;\n\n  const token = await authenticateUser(user);\n\n  return { token };\n}\n","import { z } from 'zod';\nimport type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { CreateNote } from '../functions/create-note';\n\nexport const CreateNoteRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/note',\n    {\n      schema: {\n        operationId: 'CreateNote',\n        tags: ['note'],\n        description: 'Create a folder',\n        body: z.object({\n          userId: z.string(),\n          title: z.string(),\n          content: z.string(),\n          tags: z.string().optional(),\n          folderId: z.string().optional(),\n        }),\n        response: {\n          201: z.null(),\n        },\n      },\n    },\n    async (request, reply) => {\n      // const userId = request.user.sub;\n      const { title, content, tags, userId, folderId } = request.body;\n\n      await CreateNote({\n        title,\n        content,\n        tags,\n        userId,\n        folderId,\n      });\n\n      return reply.status(201).send();\n    }\n  );\n};\n","import { db } from '../db';\nimport { notes } from '../db/schema';\n\ninterface CreateNoteRequest {\n  title: string;\n  content: string;\n  tags?: string | null;\n  folderId?: string;\n  userId: string;\n}\n\nexport async function CreateNote({\n  userId,\n  folderId,\n  content,\n  title,\n  tags,\n}: CreateNoteRequest) {\n  const result = await db\n    .insert(notes)\n    .values({\n      title,\n      content,\n      userId,\n      tags,\n      folder_id: folderId,\n    })\n    .returning();\n\n  const note = result[0];\n\n  return {\n    note,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { getNotes } from '../functions/get-notes';\n\nexport const getNotesRoute: FastifyPluginAsyncZod = async app => {\n  app.get(\n    '/notes/summary',\n    {\n      schema: {\n        operationId: 'getNotesRoute',\n        tags: ['notes'],\n        description: 'Get week summary notes',\n        response: {\n          200: z.array(\n            z.object({\n              id: z.string(),\n              title: z.string(),\n              content: z.string(),\n              tags: z.string().nullable(),\n              createdAt: z.date(),\n            })\n          ),\n        },\n      },\n    },\n    async (request, reply) => {\n      const userId = 'n6u53804o7fjhg08tit8csc1';\n      const { result } = await getNotes({ userId });\n\n      return reply.status(200).send(result);\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { notes } from '../db/schema';\n\ninterface GetNotesRequest {\n  userId: string;\n}\n\nexport async function getNotes({ userId }: GetNotesRequest) {\n  const result = await db\n    .select({\n      id: notes.id,\n      title: notes.title,\n      content: notes.content,\n      tags: notes.tags,\n      createdAt: notes.createdAt,\n    })\n    .from(notes)\n    .where(eq(notes.userId, userId));\n\n  if (!result) {\n    throw new Error('Nenhuma nota cadastrada!');\n  }\n\n  return {\n    result,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { getUserByEmailAndPassword } from '../functions/find-user-by-email-and-password';\nimport { FindNoteByTag } from '../functions/find-note-by-tag';\n\nexport const findNotesByTagsRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/notes/find',\n    {\n      schema: {\n        operationId: 'getUserByEmailAndPassword',\n        tags: ['notes', 'tags'],\n        description: 'Get user by email and passowrd',\n        body: z.object({\n          tags: z.string(),\n        }),\n        response: {\n          200: z.object({\n            note: z.array(\n              z.object({\n                id: z.string(),\n                title: z.string(),\n                content: z.string(),\n                tag: z.string(),\n                createdAt: z.date(),\n              })\n            ),\n          }),\n          404: z.object({\n            message: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { tags } = request.body;\n      const { note } = await FindNoteByTag({ tags });\n\n      if (!tags) {\n        return reply\n          .status(401)\n          .send({ message: 'Nenhuma nota cadastrada com esta tag' });\n      }\n\n      return reply.status(200).send({ note });\n    }\n  );\n};\n","import { and, eq, isNotNull } from 'drizzle-orm';\nimport { db } from '../db';\nimport { notes } from '../db/schema';\n\ninterface FidnNoteByTagRequest {\n  tags: string;\n}\n\nexport async function FindNoteByTag({ tags }: FidnNoteByTagRequest) {\n  const result = await db\n    .select({\n      id: notes.id,\n      title: notes.title,\n      content: notes.content,\n      tag: notes.tags,\n      createdAt: notes.createdAt,\n    })\n    .from(notes)\n    .where(and(isNotNull(notes.tags), eq(notes.tags, tags)));\n\n  const notesWithNonNullTags = result.map(note => ({\n    ...note,\n    tag: note.tag ?? '',\n  }));\n\n  if (notesWithNonNullTags.length === 0) {\n    throw new Error('Nenhuma nota encontrada com esta tag!');\n  }\n\n  return {\n    note: notesWithNonNullTags.length > 0 ? notesWithNonNullTags : [],\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { findNoteById } from '../functions/find-note-by-id';\n\nexport const findNotesByIdRoute: FastifyPluginAsyncZod = async app => {\n  app.get(\n    '/notes/:id',\n    {\n      schema: {\n        operationId: 'findNotesById',\n        tags: ['notes', 'tags'],\n        description: 'Find notes by id',\n        querystring: z.object({\n          id: z.string(),\n        }),\n        response: {\n          200: z.object({\n            note: z.object({\n              id: z.string(),\n              title: z.string(),\n              content: z.string(),\n              tags: z.string().nullable(),\n              createdAt: z.date(),\n            }),\n          }),\n          404: z.object({\n            message: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const notesId = request.query.id;\n      const { note } = await findNoteById({ noteId: notesId });\n\n      if (!note) {\n        return reply.status(401).send({ message: 'Nenhuma nota encontrada.' });\n      }\n\n      return reply.status(200).send({ note });\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { notes } from '../db/schema';\n\ninterface FindNoteByIdRequest {\n  noteId: string;\n}\n\nexport async function findNoteById({ noteId }: FindNoteByIdRequest) {\n  const result = await db\n    .select({\n      id: notes.id,\n      title: notes.title,\n      content: notes.content,\n      tags: notes.tags,\n      createdAt: notes.createdAt,\n    })\n    .from(notes)\n    .where(eq(notes.id, noteId));\n\n  const note = result[0];\n\n  if (!note) {\n    throw new Error('Nota nÃ£o encontrada!');\n  }\n\n  return {\n    note,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { updateNoteById } from '../functions/update-note-by-id';\n\nexport const updatedNoteRoute: FastifyPluginAsyncZod = async app => {\n  app.put(\n    '/notes/update/:id',\n    {\n      schema: {\n        operationId: 'updatedNote',\n        tags: ['notes', 'tags'],\n        description: 'updated note',\n        querystring: z.object({\n          id: z.string(),\n        }),\n        body: z.object({\n          title: z.string().optional(),\n          content: z.string().optional(),\n          tags: z.string().optional(),\n        }),\n        response: {\n          201: z.object({\n            updatedNote: z.object({\n              id: z.string(),\n              title: z.string(),\n              content: z.string(),\n              tags: z.string().nullable(),\n              createdAt: z.date(),\n            }),\n          }),\n          404: z.object({\n            message: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const notesId = request.query.id;\n      const { title, content, tags } = request.body;\n      const { updatedNote } = await updateNoteById({\n        noteId: notesId,\n        title,\n        content,\n        tags,\n      });\n\n      if (!updatedNote) {\n        return reply.status(401).send({\n          message:\n            'NÃ£o foi possÃ­vel atualizar a nota! Tente novamente mais tarde.',\n        });\n      }\n\n      return reply.status(201).send({ updatedNote });\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { notes } from '../db/schema';\n\ninterface findNoteByIdRequest {\n  noteId: string;\n}\n\ninterface UpdateNoteByIdRequest {\n  title: string;\n  content: string;\n  tags: string;\n}\n\ntype UpdatedNotePartial = Partial<UpdateNoteByIdRequest> & findNoteByIdRequest;\n\n// AssertionError: expected undefined to deeply equal { noteId: 'id', â€¦(3) }\n\nexport async function updateNoteById({\n  content,\n  title,\n  noteId,\n  tags,\n}: UpdatedNotePartial) {\n  const result = await db\n    .update(notes)\n    .set({\n      title,\n      content,\n      tags,\n    })\n    .where(eq(notes.id, noteId))\n    .returning();\n\n  console.log('Query Result:', result);\n\n  const updatedNote = result[0];\n\n  if (!updateNoteById) {\n    throw new Error('Erro ao atualizar a nota!');\n  }\n\n  console.log('Updated Note:', updatedNote);\n\n  return {\n    updatedNote,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { deleteNoteById } from '../functions/delete-note-by-id';\n\nexport const deleteNoteByIdRoute: FastifyPluginAsyncZod = async app => {\n  app.delete(\n    '/notes/delete/:id',\n    {\n      // onRequest: [authenticateUserHook],\n      schema: {\n        operationId: 'deleteNoteById',\n        tags: ['goals'],\n        description: 'Get pending goals',\n        querystring: z.object({\n          id: z.string(),\n        }),\n        response: {\n          200: z.object({\n            message: z.string(),\n          }),\n\n          400: z.object({\n            message: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const noteId = request.query.id;\n      const { result } = await deleteNoteById({ noteId });\n\n      if (!result) {\n        return reply.status(400).send({\n          message:\n            'NÃ£o foi possÃ­vel deletar> a nota! Tente novamente mais tarde.',\n        });\n      }\n\n      return reply.status(200).send({ message: 'Nota deletada com sucesso!' });\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { notes } from '../db/schema';\n\ninterface DeleteNoteByIdRequest {\n  noteId: string;\n}\n\nexport async function deleteNoteById({ noteId }: DeleteNoteByIdRequest) {\n  const result = await db.delete(notes).where(eq(notes.id, noteId));\n\n  return {\n    result,\n  };\n}\n","import { z } from 'zod';\nimport type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport { CreateTask } from '../functions/create-task';\n\nexport const createTaskRoute: FastifyPluginAsyncZod = async app => {\n  app.post(\n    '/task',\n    {\n      schema: {\n        operationId: 'Create task',\n        tags: ['task'],\n        description: 'Create a task',\n        body: z.object({\n          userId: z.string(),\n          title: z.string(),\n          content: z.string(),\n          is_completed: z.boolean(),\n        }),\n        response: {\n          201: z.object({\n            message: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      // const userId = request.user.sub;\n      const { title, content, is_completed, userId } = request.body;\n\n      await CreateTask({\n        title,\n        content,\n        userId,\n        is_completed,\n      });\n\n      return reply.status(201).send({ message: 'Tarefa criada com sucesso' });\n    }\n  );\n};\n","import { db } from '../db';\nimport { tasks } from '../db/schema';\n\ninterface CreateNoteRequest {\n  title: string;\n  content: string;\n  userId: string;\n  is_completed: boolean | null;\n}\n\nexport async function CreateTask({\n  userId,\n  content,\n  title,\n  is_completed,\n}: CreateNoteRequest) {\n  const result = await db\n    .insert(tasks)\n    .values({\n      title,\n      content,\n      userId,\n      is_completed,\n    })\n    .returning();\n\n  const task = result[0];\n\n  return {\n    task,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { getTasks } from '../functions/get-tasks';\n\nexport const getTaskRoute: FastifyPluginAsyncZod = async app => {\n  app.get(\n    '/task/summary',\n    {\n      schema: {\n        operationId: 'getNotesRoute',\n        tags: ['task'],\n        description: 'Get tasks',\n        response: {\n          200: z.array(\n            z.object({\n              id: z.string(),\n              title: z.string(),\n              content: z.string(),\n              is_completed: z.boolean().nullable(),\n              createAt: z.date(),\n            })\n          ),\n        },\n      },\n    },\n    async (request, reply) => {\n      const userId = 'n6u53804o7fjhg08tit8csc1';\n      const { result } = await getTasks({ userId });\n\n      return reply.status(200).send(result);\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { tasks } from '../db/schema';\n\ninterface GetTaskRequest {\n  userId: string;\n}\n\nexport async function getTasks({ userId }: GetTaskRequest) {\n  const result = await db\n    .select({\n      id: tasks.id,\n      title: tasks.title,\n      content: tasks.content,\n      is_completed: tasks.is_completed,\n      createAt: tasks.createAt,\n    })\n    .from(tasks)\n    .where(eq(tasks.userId, userId));\n\n  if (!result) {\n    throw new Error('Nenhuma tarefa cadastrada!');\n  }\n\n  return {\n    result,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { updateNoteById } from '../functions/update-note-by-id';\nimport { updateTaskById } from '../functions/update-task-by-id';\n\nexport const updatedTaskRoute: FastifyPluginAsyncZod = async app => {\n  app.put(\n    '/task/update/:id',\n    {\n      schema: {\n        operationId: 'updatedTask',\n        tags: ['task'],\n        description: 'updated task',\n        querystring: z.object({\n          id: z.string(),\n        }),\n        body: z.object({\n          title: z.string().optional(),\n          content: z.string().optional(),\n          is_completed: z.boolean().optional(),\n        }),\n        response: {\n          201: z.object({\n            updatedTask: z.object({\n              id: z.string(),\n              title: z.string(),\n              content: z.string(),\n              is_completed: z.boolean().nullable(),\n              createAt: z.date(),\n            }),\n          }),\n          404: z.object({\n            message: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const taskId = request.query.id;\n      const { title, content, is_completed } = request.body;\n      const { updatedTask } = await updateTaskById({\n        title,\n        content,\n        taskId,\n        is_completed,\n      });\n\n      if (!updatedTask) {\n        return reply.status(401).send({\n          message:\n            'NÃ£o foi possÃ­vel atualizar a nota! Tente novamente mais tarde.',\n        });\n      }\n\n      return reply.status(201).send({ updatedTask });\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { notes, tasks } from '../db/schema';\n\ninterface findTaskByIdRequest {\n  taskId: string;\n}\n\ninterface UpdateTaskById {\n  title: string;\n  content: string;\n  is_completed: boolean | null;\n}\n\ntype UpdatedTaskPartial = Partial<UpdateTaskById> & findTaskByIdRequest;\n\nexport async function updateTaskById({\n  content,\n  title,\n  taskId,\n  is_completed,\n}: UpdatedTaskPartial) {\n  const result = await db\n    .update(tasks)\n    .set({\n      title,\n      content,\n      is_completed,\n    })\n    .where(eq(tasks.id, taskId))\n    .returning();\n\n  const updatedTask = result[0];\n\n  if (!updateTaskById) {\n    throw new Error('Erro ao atualizar a tarefa!');\n  }\n\n  return {\n    updatedTask,\n  };\n}\n","import type { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';\nimport z from 'zod';\nimport { deleteNoteById } from '../functions/delete-note-by-id';\nimport { deleteTaskById } from '../functions/delete-task-by-id';\n\nexport const deleteTaskByIdRoute: FastifyPluginAsyncZod = async app => {\n  app.delete(\n    '/task/delete/:id',\n    {\n      // onRequest: [authenticateUserHook],\n      schema: {\n        operationId: 'deleteTaskById',\n        tags: ['task'],\n        description: 'Delete task',\n        querystring: z.object({\n          id: z.string(),\n        }),\n        response: {\n          200: z.object({\n            message: z.string(),\n          }),\n\n          400: z.object({\n            message: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const taskId = request.query.id;\n      const { result } = await deleteTaskById({ taskId });\n\n      if (!result) {\n        return reply.status(400).send({\n          message:\n            'NÃ£o foi possÃ­vel deletar> a nota! Tente novamente mais tarde.',\n        });\n      }\n\n      return reply\n        .status(200)\n        .send({ message: 'Tarefa deletada com sucesso!' });\n    }\n  );\n};\n","import { eq } from 'drizzle-orm';\nimport { db } from '../db';\nimport { notes, tasks } from '../db/schema';\n\ninterface DeleteTaskByIdRequest {\n  taskId: string;\n}\n\nexport async function deleteTaskById({ taskId }: DeleteTaskByIdRequest) {\n  const result = await db.delete(tasks).where(eq(tasks.id, taskId));\n\n  return {\n    result,\n  };\n}\n"],"mappings":"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","names":["import_zod","z","postgres","app","import_zod","dayjs","goalCompletion","app","import_dayjs","import_drizzle_orm","dayjs","import_zod","app","z","import_dayjs","import_drizzle_orm","dayjs","import_zod","import_dayjs","app","z","dayjs","import_zod","import_drizzle_orm","app","import_zod","import_drizzle_orm","app","z","import_zod","import_drizzle_orm","app","z","import_zod","app","import_zod","app","import_zod","import_drizzle_orm","app","z","import_zod","app","z","import_zod","app","import_zod","import_drizzle_orm","app","z","import_zod","import_drizzle_orm","app","z","import_zod","import_drizzle_orm","app","z","import_zod","import_drizzle_orm","app","z","import_zod","import_drizzle_orm","app","z","import_zod","app","import_zod","import_drizzle_orm","app","z","import_zod","import_drizzle_orm","app","z","import_zod","import_drizzle_orm","app","z","fastify","fastifyJwt"]}